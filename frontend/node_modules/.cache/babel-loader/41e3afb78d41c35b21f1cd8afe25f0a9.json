{"ast":null,"code":"import Axios from \"axios\";\nimport Cookie from 'js-cookie';\nimport { USER_SIGNIN_REQUEST, USER_SIGNIN_FAIL, USER_SIGNIN_SUCCESS, USER_REGISTER_REQUEST, USER_REGISTER_FAIL, USER_REGISTER_SUCCESS, USER_LOGOUT, USER_UPDATE_REQUEST, USER_UPDATE_FAIL, USER_UPDATE_SUCCESS } from \"../constants/userConstants\";\n\nconst signin = (email, password) => async dispatch => {\n  dispatch({\n    type: USER_SIGNIN_REQUEST,\n    payload: {\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/signin\", {\n      email,\n      password\n    });\n    dispatch({\n      type: USER_SIGNIN_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_SIGNIN_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst update = ({\n  userId,\n  name,\n  email,\n  password\n}) => async dispatch => {\n  dispatch({\n    type: USER_UPDATE_REQUEST,\n    payload: {\n      userId,\n      name,\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.put(\"/api/users\", +userId, {\n      name,\n      email,\n      password\n    }, {\n      headers: {\n        Authorization: 'Bearer'\n      }\n    });\n    dispatch({\n      type: USER_UPDATE_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst register = (name, email, password) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      name,\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/register\", {\n      name,\n      email,\n      password\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst logout = () => dispatch => {\n  Cookie.remove(\"userInfo\");\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\n\nexport { signin, register, logout, update };","map":{"version":3,"sources":["/Users/hunterrwaters/Desktop/e-commerce/frontend/src/actions/userActions.js"],"names":["Axios","Cookie","USER_SIGNIN_REQUEST","USER_SIGNIN_FAIL","USER_SIGNIN_SUCCESS","USER_REGISTER_REQUEST","USER_REGISTER_FAIL","USER_REGISTER_SUCCESS","USER_LOGOUT","USER_UPDATE_REQUEST","USER_UPDATE_FAIL","USER_UPDATE_SUCCESS","signin","email","password","dispatch","type","payload","data","post","set","JSON","stringify","error","message","update","userId","name","put","headers","Authorization","register","logout","remove"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAAQC,mBAAR,EAA6BC,gBAA7B,EAA+CC,mBAA/C,EAAoEC,qBAApE,EAA2FC,kBAA3F,EAA+GC,qBAA/G,EAAsIC,WAAtI,EAAmJC,mBAAnJ,EAAwKC,gBAAxK,EAA0LC,mBAA1L,QAAqN,4BAArN;;AAGA,MAAMC,MAAM,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAMC,QAAN,IAAmB;AACnDA,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAEd,mBAAP;AAA4Be,IAAAA,OAAO,EAAE;AAACJ,MAAAA,KAAD;AAAQC,MAAAA;AAAR;AAArC,GAAD,CAAR;;AACA,MAAI;AACA,UAAM;AAACI,MAAAA;AAAD,QAAS,MAAMlB,KAAK,CAACmB,IAAN,CAAW,mBAAX,EAAgC;AAACN,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAhC,CAArB;AACAC,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEZ,mBAAP;AAA4Ba,MAAAA,OAAO,EAAEC;AAArC,KAAD,CAAR;AACAjB,IAAAA,MAAM,CAACmB,GAAP,CAAW,UAAX,EAAuBC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAvB;AACH,GAJD,CAIC,OAAMK,KAAN,EAAa;AACVR,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEb,gBAAP;AAAyBc,MAAAA,OAAO,EAAEM,KAAK,CAACC;AAAxC,KAAD,CAAR;AACH;AACJ,CATD;;AAWA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,IAAV;AAAgBd,EAAAA,KAAhB;AAAuBC,EAAAA;AAAvB,CAAD,KAAsC,MAAMC,QAAN,IAAmB;AACpEA,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAEP,mBAAP;AAA4BQ,IAAAA,OAAO,EAAE;AAACS,MAAAA,MAAD;AAASC,MAAAA,IAAT;AAAed,MAAAA,KAAf;AAAsBC,MAAAA;AAAtB;AAArC,GAAD,CAAR;;AACA,MAAI;AACA,UAAM;AAACI,MAAAA;AAAD,QAAS,MAAMlB,KAAK,CAAC4B,GAAN,CAAU,YAAV,EAAwB,CAAEF,MAA1B,EAAkC;AAACC,MAAAA,IAAD;AAAOd,MAAAA,KAAP;AAAcC,MAAAA;AAAd,KAAlC,EAA2D;AAACe,MAAAA,OAAO,EAAE;AACtFC,QAAAA,aAAa,EAAE;AADuE;AAAV,KAA3D,CAArB;AAGAf,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEL,mBAAP;AAA4BM,MAAAA,OAAO,EAAEC;AAArC,KAAD,CAAR;AACAjB,IAAAA,MAAM,CAACmB,GAAP,CAAW,UAAX,EAAuBC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAvB;AACH,GAND,CAMC,OAAMK,KAAN,EAAa;AACVR,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEN,gBAAP;AAAyBO,MAAAA,OAAO,EAAEM,KAAK,CAACC;AAAxC,KAAD,CAAR;AACH;AACJ,CAXD;;AAaA,MAAMO,QAAQ,GAAG,CAACJ,IAAD,EAAOd,KAAP,EAAcC,QAAd,KAA2B,MAAMC,QAAN,IAAmB;AAC3DA,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAEX,qBAAP;AAA8BY,IAAAA,OAAO,EAAE;AAACU,MAAAA,IAAD;AAAOd,MAAAA,KAAP;AAAcC,MAAAA;AAAd;AAAvC,GAAD,CAAR;;AACA,MAAI;AACA,UAAM;AAACI,MAAAA;AAAD,QAAS,MAAMlB,KAAK,CAACmB,IAAN,CAAW,qBAAX,EAAkC;AAACQ,MAAAA,IAAD;AAAOd,MAAAA,KAAP;AAAcC,MAAAA;AAAd,KAAlC,CAArB;AACAC,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAET,qBAAP;AAA8BU,MAAAA,OAAO,EAAEC;AAAvC,KAAD,CAAR;AACAjB,IAAAA,MAAM,CAACmB,GAAP,CAAW,UAAX,EAAuBC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAvB;AACH,GAJD,CAIC,OAAMK,KAAN,EAAa;AACVR,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEV,kBAAP;AAA2BW,MAAAA,OAAO,EAAEM,KAAK,CAACC;AAA1C,KAAD,CAAR;AACH;AACJ,CATD;;AAWA,MAAMQ,MAAM,GAAG,MAAOjB,QAAD,IAAc;AAC/Bd,EAAAA,MAAM,CAACgC,MAAP,CAAc,UAAd;AACAlB,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAACR;AAAN,GAAD,CAAR;AACH,CAHD;;AAKA,SAAQI,MAAR,EAAgBmB,QAAhB,EAA2BC,MAA3B,EAAmCP,MAAnC","sourcesContent":["import Axios from \"axios\";\nimport Cookie from 'js-cookie';\nimport {USER_SIGNIN_REQUEST, USER_SIGNIN_FAIL, USER_SIGNIN_SUCCESS, USER_REGISTER_REQUEST, USER_REGISTER_FAIL, USER_REGISTER_SUCCESS, USER_LOGOUT, USER_UPDATE_REQUEST, USER_UPDATE_FAIL, USER_UPDATE_SUCCESS } from \"../constants/userConstants\"\n\n\nconst signin = (email, password) => async(dispatch) => {\n    dispatch({type: USER_SIGNIN_REQUEST, payload: {email, password}});\n    try {\n        const {data} = await Axios.post(\"/api/users/signin\", {email, password});\n        dispatch({type: USER_SIGNIN_SUCCESS, payload: data});\n        Cookie.set('userInfo', JSON.stringify(data));\n    }catch(error) {\n        dispatch({type: USER_SIGNIN_FAIL, payload: error.message});\n    }\n}\n\nconst update = ({ userId, name, email, password}) => async(dispatch) => {\n    dispatch({type: USER_UPDATE_REQUEST, payload: {userId, name, email, password}});\n    try {\n        const {data} = await Axios.put(\"/api/users\", + userId, {name, email, password}, {headers: {\n            Authorization: 'Bearer'\n        }});\n        dispatch({type: USER_UPDATE_SUCCESS, payload: data});\n        Cookie.set('userInfo', JSON.stringify(data));\n    }catch(error) {\n        dispatch({type: USER_UPDATE_FAIL, payload: error.message});\n    }\n}\n\nconst register = (name, email, password) => async(dispatch) => {\n    dispatch({type: USER_REGISTER_REQUEST, payload: {name, email, password}});\n    try {\n        const {data} = await Axios.post(\"/api/users/register\", {name, email, password});\n        dispatch({type: USER_REGISTER_SUCCESS, payload: data});\n        Cookie.set('userInfo', JSON.stringify(data));\n    }catch(error) {\n        dispatch({type: USER_REGISTER_FAIL, payload: error.message});\n    }\n}\n\nconst logout = () => (dispatch) => {\n    Cookie.remove(\"userInfo\");\n    dispatch({type:USER_LOGOUT})\n}\n\nexport {signin, register , logout, update};"]},"metadata":{},"sourceType":"module"}